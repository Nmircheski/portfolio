@use 'variables' as *;
@use 'sass:map';

//Typography
@mixin typography($typography) {
  @each $heading, $value in $typography {
    @each $weight, $weight-value in $value {
      @each $device, $props in $weight-value {
        //TODO the values in the map are being duplicated for normal, medium, and bold
        //Create if else where if the weight is normal, medium, or bold you add those classes
        $breakpoint: map.get($breakpoints, $device);
        $font-size: map.get($props, font-size);
        $line-height: map.get($props, line-height);
        $font-weight: map.get($props, font-weight);
        $letter-spacing: map.get($props, letter-spacing);
        $font-family: map.get($props, font-family);
        @media (min-width: $breakpoint) {
          //TODO do not use utility classes, go full BEM in this project
          .#{$heading}-#{$weight} {
            font-family: $font-family;
            font-size: $font-size;
            line-height: $line-height;
            font-weight: $font-weight;
            letter-spacing: $letter-spacing;
            color: #ffffff;
          }
        }
      }
    }
  }
}

//Colors
// Mixin to generate hue-based custom properties
@mixin generate-color-variables($map, $prefix) {
  @each $key, $value in $map {
    --color-#{$prefix}-#{$key}: #{$value};
  }
}

//Spacing
@mixin generate-spacing-tokens() {
  @each $name, $value in $spacing {
    --space-#{$name}: #{$value};
  }
}

@mixin generate-padding-modifiers() {
  @each $name, $value in $spacing {
    &--space-py-#{$name} {
      padding-top: #{$value};
      padding-bottom: #{$value};
    }
    &--space-pt-#{$name} {
      padding-top: #{$value};
    }
    &--space-pb-#{$name} {
      padding-bottom: #{$value};
    }
    &--space-px-#{$name} {
      padding-left: #{$value};
      padding-right: #{$value};
    }
    &--space-pr-#{$name} {
      padding-right: #{$value};
    }
    &--space-pl-#{$name} {
      padding-left: #{$value};
    }
  }
}

@mixin generate-margin-modifiers() {
  @each $name, $value in $spacing {
    &--space-my-#{$name} {
      margin-top: #{$value};
      margin-bottom: #{$value};
    }
    &--space-mt-#{$name} {
      margin-top: #{$value};
    }
    &--space-mb-#{$name} {
      margin-bottom: #{$value};
    }

    &--space-mx-#{$name} {
      margin-left: #{$value};
      margin-right: #{$value};
    }

    &--space-mr-#{$name} {
      margin-right: #{$value};
    }

    &--space-ml-#{$name} {
      margin-left: #{$value};
    }
  }
}

@mixin generate-radius-modidifiers() {
  @each $name, $value in $spacing {
    &--radius-#{$name} {
      border-radius: #{$value};
    }
  }
}

@mixin generate-all-spacing-modifiers() {
  @include generate-margin-modifiers();
  @include generate-padding-modifiers();
}

//Responsive
@mixin respond-up($breakpoint) {
  @if $breakpoint == 'md' {
    @media (min-width: 768px) {
      @content;
    }
  }
}
