@use 'colors' as *;

// Mixin to generate hue-based custom properties
@mixin generate-color-variables($map, $prefix) {
  @each $key, $value in $map {
    --color-#{$prefix}-#{$key}: #{$value};
  }
}

/*TODO 
define appropriate names for the semantic role tokens..
currently they are used as the color name
*/
// Light Theme
:root {
  @include generate-color-variables($gray-light, 'muted');
  @include generate-color-variables($emerald, 'primary');
  // Base color tokens
  --color-primary-500: #{map-get($emerald, 500)};

  @each $key, $value in $gray-light {
    --color-muted-#{$key}: #{$value};
  }

  // Semantic role tokens
  --color-bg: var(--color-muted-50);
  --color-surface: var(--color-muted-100);
  --color-border: var(--color-muted-300);
  --color-muted: var(--color-muted-500);
  --color-text: var(--color-muted-900);
  --color-heading: var(--color-muted-950);

  --color-primary: var(--color-primary-500);
  --color-accent: var(--color-muted-400);
  --color-error: #dc3545;
}

// Dark Theme
.dark-theme {
  @include generate-color-variables($gray-dark, 'muted');
  @include generate-color-variables($emerald, 'primary');

  --color-primary-500: #{map-get($emerald, 500)};

  @each $key, $value in $gray-dark {
    --color-muted-#{$key}: #{$value};
  }

  --color-bg: var(--color-muted-950);
  --color-surface: var(--color-muted-900);
  --color-border: var(--color-muted-600);
  --color-muted: var(--color-muted-400);
  --color-text: var(--color-muted-100);
  --color-heading: var(--color-muted-50);

  --color-primary: var(--color-primary-500);
  --color-accent: var(--color-muted-300);
  --color-error: #ef5350;
}
